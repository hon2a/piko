var ActionSet = require('ActionSet'),
	HTTP = require('http-status'),
	validation = require('validation'),
	util = require('util'),
	fn = require('functions');

var validator = module.exports = function (config) {
	
	return function (req, res, action, next) {
		var isSupportedAction = (['create', 'update', 'destroy'].indexOf(action) >= 0);
		if (isSupportedAction && (config[action] || config.all)) {
			var cfg = fn.merge({}, config[action] || {}, config.all),
				actions = new ActionSet(),
				keys = Object.keys(req.data || {});
			keys.forEach(function (value, key) {
				var valiCfg = cfg[key];
				if (valiCfg) {
					actions.add(function (callback) {
						validation.validate(valiCfg, value, callback);
					});
					delete cfg[key];	// remove used config to find missing items
				} else if (valiCfg !== false) {
					delete req.data[key];
				}
			});

			actions.run(function (err, results) {
				if (err) {
					res.finish(err);
				} else {
					var missing = Object.keys(cfg);
					if (missing.length) {
						res.send(util.format('Missing mandatory arguments %s.',
								missing.map(fn.quote).join(', ')), HTTP.BAD_REQUEST);
					} else {
						var valid = true,
							validationErrors = ['Invalid argument value(s):'];
						results.forEach(function (result, i) {
							if (!result[0]) {
								valid = false;
								validationErrors.push(keys[i] + ': ' + result[1]);
							}
						});
						if (valid) {
							next();
						} else {
							res.send(validationErrors.join('\n\t'), HTTP.BAD_REQUEST);
						}
					}
				}
			});
		} else {
			next();
		}
	};
};