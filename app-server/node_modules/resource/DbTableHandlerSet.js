var ResourceHandlerSet = require('./ResourceHandlerSet'),
	HTTP = require('http-status');

var DbTableHandlerSet = module.exports = ResourceHandlerSet.extend({

	constructor: function (config) {
		this.base(fn.merge({
			parent: null,
			table: null,	// mandatory
			transform: null,
			view: config.table
		}, config));
	},

	getItem: function (req) {
		return req[this.config.id];
	},
	
	getItemSelector: function (req) {
		return fn.merge(this.getParentLink(req), {
			id: this.getItem(req).id
		})
	},
	
	getParentLink: function (req) {
		var link = {},
			parent = this.config.parent;
		if (parent) {
			link[parent.field] = req[parent.id].id;
		}
		return link;
	},

	getTable: function (req) {
		return req.db[this.config.table];
	},

	getView: function (req) {
		return req.db[this.config.view];
	},

// handler methods

	index: function (req, res) {
		this.getView(req).select({
			where: this.getParentLink(req),
			transform: this.config.transform
		}, res.finish);
	},

	create: function (req, res) {
		var data = fn.merge({}, this.getParentLink(req), req.data);
		this.getTable(req).insert(data, function (err, result) {
			if (err) {
				res.finish(err);
			} else {
				res.send(req.path + '/' + result.insertId, HTTP.CREATED);
			}
		});
	},

	load: function (req, id, next) {
		this.getView(req).selectSingle({
			where: fn.merge(this.getParentLink(req), {
				id: id
			}),
			transform: this.config.transform
		}, next);
	},

	show: function (req, res) {
		res.send(this.getItem(req));
	},

	update: function (req, res) {
		this.getTable(req).update(req.data, this.getItemSelector(req), function (err) {
			res.finish(err, 'Resource updated.');
		});
	},

	destroy: function (req, res) {
		this.getTable(req).remove(this.getItemSelector(req), function (err) {
			res.finish(err, 'Resource deleted.');
		});
	}

});