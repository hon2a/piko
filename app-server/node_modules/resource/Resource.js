var Base = require('Base'),
	ActionSequence = require('ActionSequence'),
	HTTP = require('http-status'),
	util = require('util'),
	fn = require('functions'),
	ResourceHandlers = require('./handlers/ResourceHandlers');

var Resource = module.exports = Base.extend({

	// protected
	handlers: null,
	// protected
	middleware: null,

	constructor: function () {
		this.handlers = {};
		this.middleware = new ActionSequence();
	},

	runMiddleware: function (req, res, action, next) {
		this.middleware.run(req, res, action, function (err) {
			if (err) {
				res.send(err, HTTP.INTERNAL_SERVER_ERROR);
			} else {
				next();
			}
		});
	},

	runHandler: function (req, res, action) {
		this.handlers[action](req, res);
	},

	// protected
	handleRequest: function (req, res, action) {
		if (this.isActionSupported(action)) {
			this.runMiddleware(req, res, action, fn.proxy(function () {
				this.runHandler(req, res, action);
			}, this));
		} else {
			res.send('Method not supported for this resource.', HTTP.BAD_REQUEST);
		}
	},

	isActionSupported: function (action) {
		return !!this.handlers[action];
	},

// resource creation methods

	setHandler: function (action, handler) {
		this.handlers[action] = handler;
		return this;
	},

	setHandlers: function (handlers) {
		if (handlers instanceof ResourceHandlers) {
			handlers = handlers.exportHandlers();
		}
		this.handlers = handlers;
		return this;
	},

	use: function (middleware) {
		this.middleware.add(middleware);
		return this;
	},

// resource export method

	exportHandlers: function () {
		var methods = ['index', 'create', 'new', 'load', 'show', 'update', 'edit', 'destroy'],
			ret = {};

		methods.forEach(function (methodName) {
			ret[methodName] = fn.proxy(this[methodName], this);
		}, this);
		
		return ret;
	},

// resource contract methods

	index: function (req, res) {
		this.handleRequest(req, res, 'index');
	},

	create: function (req, res) {
		req.data = req.data || req.body;
		this.handleRequest(req, res, 'create');
	},

	'new': function (req, res) {
		req.data = req.data || req.query;
		this.create(req, res);
	},

	load: function (req, id, next) {
		if (this.handlers.load) {
			this.handlers.load(req, id, next);
		} else {
			next();
		}
	},

	show: function (req, res) {
		this.handleRequest(req, res, 'show');
	},

	update: function (req, res) {
		req.data = req.data || req.body;
		this.handleRequest(req, res, 'update');
	},

	edit: function (req, res) {
		req.data = req.data || req.query;
		this.update(req, res);
	},

	destroy: function (req, res) {
		this.handleRequest(req, res, 'destroy');
	}

});