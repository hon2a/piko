var Resource = require('./Resource'),
	util = require('util'),
	fn = require('functions');

var resource = module.exports = {

	ResourceHandlers: require('./handlers/ResourceHandlers'),

	DbTableHandlers: require('./handlers/DbTableHandlers'),
	
	DirectoryIndexHandlers: require('./handlers/DirectoryIndexHandlers'),
	
	FileStorageHandlers: require('./handlers/FileStorageHandlers'),
	
	UsersTableHandlers: require('./handlers/UsersTableHandlers'),
	
	ApplicationsTableHandlers: require('./handlers/ApplicationsTableHandlers'),

	Resource: Resource,

// generic factory method

	create: function (handlers, middleware) {
		middleware = middleware || [];
		middleware = util.isArray(middleware) ? middleware : [middleware];
		
		var rsrc = new Resource();
		middleware.forEach(function (mw) {
			if (fn.isFunction(mw)) {
				rsrc.use(mw);
			} else {
				fn.each(mw, function (cfg, name) {
					rsrc.use(resource[name](cfg));
				});
			}
		});
		return rsrc.setHandlers(handlers).exportHandlers();
	},

// resource middleware makers

	authenticator: require('./middleware/authenticator'),

	validator: require('./middleware/validator'),

// helper functions

	expandConfig: require('./expandConfig')
	
};