var Base = require('Base'),
	fn = require('functions');

// actions are executed in parallel, error means the end of execution
module.exports = ActionSet = Base.extend({

	actions: null,
	arguments: null,

	constructor: function () {
		this.actions = [];
		this.arguments = [];
	},

	add: function (action) {
		this.actions.push(action);
		this.arguments.push(fn.array(arguments, 1));
	},

	clear: function () {
		this.actions = [];
	},

	run: function (callback) {
		var args = fn.array(arguments);
		callback = args.pop();
		this.runActions(args, callback);
	},

	// protected
	runActions: function (args, callback) {
		var error = false,
			results = [],
			unfinished = this.actions.length,
			done = function (err) {
				if (error) {
					// do nothing, callback already called with error and partial results
				} else if (err) {
					error = true;
					callback(err, results);
				} else {
					results.push(Array.prototype.slice.call(arguments, 1));
					--unfinished;
					if (!unfinished) {
						callback(null, results);
					}
				}
			};

		if (unfinished) {
			this.actions.forEach(function (action, index) {
				action.apply(module, args.concat(this.arguments[index], [done]));
			}, this);
		} else {
			callback(null, []);
		}
	},

	set: function (actions) {
		this.clear();
		actions.forEach(this.add, this);
	}

});