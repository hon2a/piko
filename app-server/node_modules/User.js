var Base = require('Base'),
	HTTP = require('http-status'),
	fn = require('functions');

var privilegeNames = [
	'manageUsertypes',
	'viewUsers',
	'createUser',
	'editUser',
	'deleteUser'
];

var User = module.exports = Base.extend({

	can: null,
	email: null,
	name: null,
	username: null,

	constructor: function (user) {
		fn.merge(this, fn.pick(user, ['email', 'name', 'username']));
		this.can = User.parsePrivileges(user.privileges);
	}
	
}, {

	// middleware
	access: function (req, res, next) {
		var err = null;
		if (req.session) {
			if (req.session.user) {
				req.access = req.session.user;
			}
		} else {
			err = new Error('Access control error: session not initialized.');
		}
		next(err);
	},

	// request handler
	activate: function (req, res) {
		var code = req.query.code || req.body.code;

		if (code) {
			req.db.users.selectSingle({
				where: {
					activationCode: code
				}
			}, function (err, user) {
				if (err) {
					res.send(err, HTTP.INTERNAL_SERVER_ERROR);
				} else if (!user) {
					res.send('Invalid code.', HTTP.FORBIDDEN);
				} else {
					req.db.users.update({
						activationCode: ''
					}, {
						id: user.id
					}, function (err) {
						res.finish(err, 'Account activated.');
					});
				}
			});
		} else {
			res.send('Missing mandatory argument \'code\'.', HTTP.BAD_REQUEST);
		}
	},

	// request handler
	get: function (req, res) {
		if (req.session.user) {
			res.send(req.session.user);
		} else {
			res.send('Not signed in.', HTTP.FORBIDDEN);
		}
	},

	// request handler
	login: function (req, res) {
		if (req.session.user) {
			req.session.user = null;
			req.access = null;
		}
		
		var username = req.query.username || req.body.username,
			password = req.query.password || req.body.password;
			
		if (username && password) {
			req.db.v_users.selectSingle({
				where: {
					username: username
				}
			}, function (err, user) {
				if (err) {
					res.send(err, HTTP.INTERNAL_SERVER_ERROR);
				} else if (!user) {
					res.send('Invalid username.', HTTP.FORBIDDEN);
				} else if (user.activationCode !== '') {
					res.send('Account not activated.', HTTP.FORBIDDEN);
				} else if (user.password !== fn.md5(password)) {
					res.send('Invalid password.', HTTP.FORBIDDEN);
				} else {
					req.session.user = new User(user);
					res.send('Signed in.');
				}
			});
		} else {
			res.send('Missing mandatory arguments \'username\' and/or \'password\'.',
					HTTP.BAD_REQUEST);
		}
	},

	// request handler
	logout: function (req, res) {
		req.session.user = null;
		req.access = null;
		res.send('Signed out.');
	},

	// static function
	parsePrivileges: function (binaryPrivs) {
		var privNum = binaryPrivs,
			privileges = {};
		privilegeNames.forEach(function (priv) {
			privileges[priv] = !!(privNum % 2);
			privNum = privNum >>> 1;
		});
		return privileges;
	},

	// static function - db result transformer
	transformPrivileges: function (obj) {
		obj.privileges = User.parsePrivileges(obj.privileges);
		return obj;
	}

});