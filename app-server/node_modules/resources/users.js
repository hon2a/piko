var fn = require('functions'),
	HTTP = require('http-status'),
	User = require('User'),
	ActionSequence = require('ActionSequence'),
	resource = require('resource');

// resource definition

var UsersHandlerSet = resource.DbTableHandlerSet.extend({

	loadUser: function (req, conditions, callback) {
		req.db.v_users_extended.selectSingle({
			where: conditions,
			transform: User.transformPrivileges
		}, callback);
	},
	generateActivationCode: function (req, res, next) {
		req.db.v_users_extended.select({
			where: {
				activationCode: ['!=', '']
			}
		}, function (err, users) {
			if (err) {
				res.finish(err);
			} else {
				var code;
				do {
					code = fn.md5(fn.randomString());
				} while (users.some(function (user) {
					return (code === user.activationCode);
				}));
				req.data.activationCode = code;
				next();
			}
		});
	},
	checkUsernameAvailability: function (req, res, next) {
		this.loadUser(req, {username: req.data.username}, function (err, user) {
			if (err) {
				res.finish(err);
			} else if (!user) {
				next();
			} else {
				res.send('Username already taken.', HTTP.BAD_REQUEST);
			}
		});
	},
	sendActivationEmail: function (req, res, next) {
		req.smtp.send({
			to: req.data.email,
			subject: 'Welcome to PIKOMAT web!',
			text: util.format('Hello %s,\n\n' +
				'you have successfully created your user account at PIKOMAT web. ' +
				'Before you can sign in, you need to activate your account by ' +
				'entering the following URL into your web browser:\n\n' +
				'%s/account/activate?code=%s\n\n' +
				'See you around.', req.data.name, req.baseUrl, req.data.activationCode)
		}, function (err) {
			if (err) {
				res.finish(err);
			} else {
				next();
			}
		});
	},

// overrides

	create: function (req, res) {
		var base = fn.proxy(this.base, this);
		this.checkUsernameAvailability(req, res, fn.proxy(function () {
			req.data.password = fn.md5(req.data.password);
			if (req.access && req.access.can.createUser) {
				// create active user account
				base(req, res);
			} else {
				// create inactive user account and send activation email
				req.data.typeId = 2;	// FIXME: fix usertypes, create base 'pupil' usertype, report invalidity
				this.generateActivationCode(req, res, fn.proxy(function () {
					this.sendActivationEmail(req, res, function () {
						base(req, res);
					});
				}, this));
			}
		}, this));
	},
	load: function (req, id, next) {
		if (fn.isInt(id)) {
			this.loadUser(req, {id: id}, next);
		} else {
			this.loadUser(req, {username: id}, next);
		}
	}
});

var users = module.exports = (new resource.Resource())
	.use(resource.authenticator({
		index: 'viewUsers',
		create: false,	// anyone can create inactive accounts
		show: 'viewUsers',
		update: 'editUser',
		destroy: 'deleteUser'
	}))
	.use(resource.loadChecker('user'))
	.use(resource.validator({
		all: {
			password: 'password',
			name: ['text', 5, 50],
			email: 'email',
			typeId: 'id'
		},
		create: {
			username: 'username'
		},
		update: {
			id: 'id'
		}
	}))
	.setHandlers(new UsersHandlerSet({
		id: 'user',
		table: 'users',
		transform: User.transformPrivileges,
		view: 'v_users_extended'
	}))
	.exportHandlers();