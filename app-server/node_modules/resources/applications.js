var fn = require('functions'),
	HTTP = require('http-status'),
	User = require('User'),
	ActionSequence = require('ActionSequence'),
	resource = require('resource');

// resource definition

var ApplicationsHandlerSet = resource.DbTableHandlerSet.extend({

// overrides

	update: function (req, res) {
		req.data.approved = req.data.approved ? new Date() : null;
		this.base(req, res);
	},
	
	load: function (req, id, next) {
		if (id === 'latest') {
			this.getView(req).select({
				where: this.getParentLink(req)
			}, function (err, rows) {
				next(err, rows.length ? rows[rows.length - 1] : null);
			});
		} else {
			this.base(req, id, next);
		}
	}
	
});

var selfOr = function (priv) {
	return function (req, next) {
		var user = req.user || { id: 0 };
		next(null, (req.access && (req.access.can[priv] || (req.access.id === user.id))));
	}
};

var users = module.exports = (new resource.Resource())
	.use(resource.authenticator({
		index: selfOr('viewUsers'),
		create: selfOr('editUser'),
		show: selfOr('viewUsers'),
		update: 'approveApplications',
		destroy: selfOr('editUser')
	}))
	.use(resource.loadChecker('user'))
	.use(resource.loadChecker('application'))
	.use(resource.validator({
		create: {
			school: ['text', 5, 50],
			grade: ['number', 6, 9]
		},
		update: {
			approved: 'bool'
		}
	}))
	.setHandlers(new ApplicationsHandlerSet({
		name: 'application',
		table: 'applications',
		parent: {
			field: 'userId',
			name: 'user'
		}
	}))
	.exportHandlers();