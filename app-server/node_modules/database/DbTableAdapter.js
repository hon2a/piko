var Base = require('Base'),
	util = require('util'),
	fn = require('functions'),
	Sequence = require('Sequence');

var DbTableAdapter = module.exports = Base.extend({

	db: null,
	table: null,

	constructor: function (o) {
		this.connection = o.connection;
		this.table = o.table;
	},

	create: function (options, callback) {
		this.query(util.format("CREATE TABLE IF NOT EXISTS `%s` (%s) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_czech_ci AUTO_INCREMENT=1 ;",
				this.table, options.fields), callback);
	},

	remove: function (conditions, callback) {
		conditions = this.objectToMysql(conditions);

		this.query(util.format("DELETE FROM `%s` WHERE %s;", this.table, conditions.code),
				conditions.values, callback);
	},

	insert: function (data, callback) {
		var keys = [],
			placeholders = [],
			values = [];
		fn.each(data, function (val, key) {
			keys.push('`' + key + '`');
			placeholders.push('?');
			values.push(val);
		});

		this.query(util.format("INSERT INTO `%s` (%s) VALUES (%s);", this.table,
				keys.join(','), placeholders.join(',')), values, callback);
	},

	insertMore: function (items, callback) {
		var sequence = new Sequence();
		items.forEach(function (item) {
			sequence.add(fn.proxy(function (next) {
				this.insert(item, next);
			}, this));
		}, this);
		sequence.run(callback);
	},

	objectToMysql: function (obj) {
		var ret = {
			code: [],
			values: []
		};
		fn.each(obj, function (val, key) {
			ret.code.push('`' + key + '` = ?');
			ret.values.push(val);
		});
		ret.code = ret.code.join(',');
		return ret;
	},

	query: function (query, values, callback) {
		// query(query, callback)
		if (typeof values === 'function') {
			callback = values;
			values = [];
		}
		
		console.log('MySQL query: ' + query + '\n' + values);
		
		this.connection.query(query, values, callback);
	},

	select: function (options, callback) {
		// select(callback)
		if (typeof options === 'function') {
			callback = options;
			options = {};
		}

		// default options
		var o = fn.merge({
			fields: null,
			transform: false,
			where: true
		}, options);

		var fields = o.fields ? o.fields.join(',') : '*';

		var noConditions = fn.isBoolean(o.where),
			conditions = noConditions ? {} : o.where;
		conditions = this.objectToMysql(conditions);
		if (!conditions.values.length) {
			conditions = {
				code: '?',
				values: [noConditions ? o.where : true]
			};
		}

		this.query(util.format("SELECT %s FROM `%s` WHERE %s;", fields, this.table,
				conditions.code), conditions.values, function (err, rows) {
			if (rows && o.transform) {
				rows = rows.map(o.transform);
			}
			callback(err, rows);
		});
	},

	selectSingle: function (options, callback) {
		this.select(options, function (err, rows) {
			if (err) {
				callback(err, null);
			} else {
				callback(null, rows[0] || null);
			}
		});
	},

	update: function (data, conditions, callback) {
		var set = this.objectToMysql(data);
		conditions = this.objectToMysql(conditions);

		this.query(util.format("UPDATE `%s` SET %s WHERE %s;", this.table,
				set.code, conditions.code), set.values.concat(conditions.values), callback);
	}

});