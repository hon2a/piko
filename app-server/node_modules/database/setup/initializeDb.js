var connectToDb = require('../connectToDb')
	util = require('util'),
	fn = require('functions'),
	ActionSequence = require('ActionSequence'),
	DbViewInitializer = require('./DbViewInitializer'),
	initializers = {
		applications: require('./tables/applications'),
		users: require('./tables/users'),
		usertypes: require('./tables/usertypes'),
		v_fresh_applications: "select * from `applications` where `id` in (select max(`id`) from `applications` group by `userId`);",
		v_users: "select `users`.`id` AS `id`,`users`.`username` AS `username`,`users`.`password` AS `password`,`users`.`name` AS `name`,`users`.`email` AS `email`,`users`.`lastAccess` AS `lastAccess`,`users`.`activationCode` AS `activationCode`,`users`.`typeId` AS `typeId`,`usertypes`.`name` AS `type`,`usertypes`.`privileges` AS `privileges` from (`users` join `usertypes` on((`users`.`typeId` = `usertypes`.`id`))) where 1;",
		v_users_extended: "select `u`.`id` AS `id`,`u`.`username` AS `username`,`u`.`password` AS `password`,`u`.`name` AS `name`,`u`.`email` AS `email`,`u`.`lastAccess` AS `lastAccess`,`u`.`activationCode` AS `activationCode`,`u`.`typeId` AS `typeId`,`u`.`type` AS `type`,`u`.`privileges` AS `privileges`,`a`.`school` AS `school`,`a`.`grade` AS `grade`,`a`.`expires` AS `expires`,`a`.`approved` AS `approved` from (`v_users` `u` left join `v_fresh_applications` `a` on((`u`.`id` = `a`.`userId`)));"
	};

var initializeDb = module.exports = function (options, callback) {
	var dbName = options.config.database;
	options.config = fn.merge({}, options.config);
	delete options.config.database;
	
	var connection = connectToDb(options),
		cb = function (err) {
			connection.close(function () {
				callback(err);
			});
		},
		createDb = function (callback) {
			connection.query(util.format("CREATE DATABASE `%s`;", dbName), function (err) {
				if (!fn.handleError(err, 'Cannot create database.', callback)) {
					callback(null);
				}
			});
		},
		initDb = function (callback) {
			connection.query(util.format("USE `%s`;", dbName), function (err) {
				if (err) {
					if (err.code === 'ER_BAD_DB_ERROR') {
						console.log('Creating database `' + dbName + '`...');
						createDb(function () {
							console.log('Database created.');
							connection.useDb(dbName, callback);
						});
					} else {
						fn.handleError(err, 'Cannot select database. ', callback);
					}
				} else {
					connection.useDb(dbName, callback);
				}
			});
		},
		initTables = function (callback) {
			var seq = new ActionSequence();

			fn.each(initializers, function (klass, table) {
				var adapterConfig = {
						connection: connection,
						table: table
					},
					initializer = fn.isString(klass) ?
						new DbViewInitializer(adapterConfig, klass) :
						new klass(adapterConfig);
				seq.add(function (callback) {
					console.log('Initializing `' + table + '`...');
					initializer.init(function (err) {
						if (!fn.handleError(err, 'Cannot initialize `' + table + '`.', callback)) {
							console.log('`' + table + '` initialized.');
							callback(null);
						}
					});
				});
			});
			seq.run(callback);
		};

	console.log('Starting database initialization...');

	initDb(function (err) {
		if (!fn.handleError(err, cb)) {
			initTables(function (err) {
				if (!fn.handleError(err, cb)) {
					console.log('Database initialized.');
					connection.close();
					cb(null);
				}
			});
		}
	});

};