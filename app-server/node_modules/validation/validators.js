var util = require('util'),
	fn = require('functions');

var validators = module.exports = {

	email: (function () {
		var rx = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/;
		return function (val) {
			return rx.test(val) || 'Not a valid e-mail address.';
		};
	})(),

	// testing function (not much use otherwise)
	eq: function (val, a) {
		return (val === a) || util.format('Not equal to %s.', fn.quote(a));
	},

	id: function (val) {
		return validators['int'](val);
	},

	'int': function (val) {
		return validators.num(val, 1, 1099511627776);	// 4-byte unsigned int
	},

	num: function (val, min, max) {
		var num = parseInt(val, 10);
		if (num.toString() === val) {
			if ((min !== undefined) && (num < min)) {
				return util.format('Out of range (min. %s).', min);
			} else if ((max !== undefined) && (num > max)) {
				return util.format('Out of range (max. %s).', max);
			} else {
				return true;
			}
		} else {
			return 'Not a number.';
		}
	},

	password: function (val) {
		var inRange = validators.text(val, 5, 20);
		if (inRange === true) {
			return (/[a-z]/.test(val) && /[A-Z]/.test(val) && /[0-9]/.test(val)) ||
					'Missing some of the following: lowercase letter, uppercase letter, digit.';
		} else {
			return inRange;
		}
	},

	text: function (val, minLength, maxLength) {
		if ((minLength !== undefined) && (val.length < minLength)) {
			return util.format('Too short (min. length %s).', minLength);
		} else if ((maxLength !== undefined) && (val.length > maxLength)) {
			return util.format('Too long (max. length %s).', maxLength);
		} else {
			return true;
		}
	},

	username: function (val) {
		var inRange = validators.text(val, 5, 20);
		if (inRange === true) {
			return /^\w*$/.test(val) || 'Must consist only of letters, digits, and underscores.';
		} else {
			return inRange;
		}
	}
	
};