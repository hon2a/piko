var validators = require('./validators'),
	util = require('util'),
	fn = require('functions');

/**
 * @param {Array/String/RegExp} config depending on type:
 *		String: ID of argument-less validator,
 *		Array: ID of validator and arguments to be passed to it,
 *		RegExp: regular expression to match the value against
 *	@param {Object} value
 *	@param {Function} callback callback(error, isValid, validationErrorMessage)
 * @return {String} validation error message or null if valid
 */
var validate = module.exports = function (config, value, callback) {
	var error = null,
		result = true,
		validator = null,
		args = [];

	if (config) {
		config = fn.isString(config) ? [config] : config;
		if (fn.isArray(config)) {
			var name = config[0];
			if (validators[name]) {
				validator = validators[name];
				args = config.slice(1);
			} else {
				error = util.format('Validator %s not found.', fn.quote(name));
			}
		} else {
			validator = config;
		}
	}

	if (fn.isFunction(validator)) {
		result = validator.apply(module, [value].concat(args));
	} else if (util.isRegExp(validator)) {
		result = config.test(value) ||
				util.format('Value does not match expression %s.', config);
	}

	result = (result === false) ?
		util.format('Value %s forbidden by unspecified restriction.', fn.quote(value)) :
		result;
	callback(error, (result === true), result);
};